// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/services/project_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/services/project_service.go -destination=mocks/core/ports/services/project_service_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	project "softpharos/internal/core/domain/project"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectService is a mock of ProjectService interface.
type MockProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceMockRecorder
	isgomock struct{}
}

// MockProjectServiceMockRecorder is the mock recorder for MockProjectService.
type MockProjectServiceMockRecorder struct {
	mock *MockProjectService
}

// NewMockProjectService creates a new mock instance.
func NewMockProjectService(ctrl *gomock.Controller) *MockProjectService {
	mock := &MockProjectService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService) EXPECT() *MockProjectServiceMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectService) CreateProject(ctx context.Context, arg1 *project.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceMockRecorder) CreateProject(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectService)(nil).CreateProject), ctx, arg1)
}

// DeleteProject mocks base method.
func (m *MockProjectService) DeleteProject(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectServiceMockRecorder) DeleteProject(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectService)(nil).DeleteProject), ctx, id)
}

// GetAllProjects mocks base method.
func (m *MockProjectService) GetAllProjects(ctx context.Context) ([]project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects", ctx)
	ret0, _ := ret[0].([]project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockProjectServiceMockRecorder) GetAllProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockProjectService)(nil).GetAllProjects), ctx)
}

// GetProjectByID mocks base method.
func (m *MockProjectService) GetProjectByID(ctx context.Context, id int) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, id)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockProjectServiceMockRecorder) GetProjectByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockProjectService)(nil).GetProjectByID), ctx, id)
}

// GetProjectsByOwner mocks base method.
func (m *MockProjectService) GetProjectsByOwner(ctx context.Context, ownerID int) ([]project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsByOwner", ctx, ownerID)
	ret0, _ := ret[0].([]project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectsByOwner indicates an expected call of GetProjectsByOwner.
func (mr *MockProjectServiceMockRecorder) GetProjectsByOwner(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsByOwner", reflect.TypeOf((*MockProjectService)(nil).GetProjectsByOwner), ctx, ownerID)
}

// UpdateProject mocks base method.
func (m *MockProjectService) UpdateProject(ctx context.Context, arg1 *project.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectServiceMockRecorder) UpdateProject(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectService)(nil).UpdateProject), ctx, arg1)
}
